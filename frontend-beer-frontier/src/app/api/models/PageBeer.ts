/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PageableObject } from './PageableObject';
import {
    PageableObjectFromJSON,
    PageableObjectFromJSONTyped,
    PageableObjectToJSON,
} from './PageableObject';
import type { SortObject } from './SortObject';
import {
    SortObjectFromJSON,
    SortObjectFromJSONTyped,
    SortObjectToJSON,
} from './SortObject';
import type { Beer } from './Beer';
import {
    BeerFromJSON,
    BeerFromJSONTyped,
    BeerToJSON,
} from './Beer';

/**
 * 
 * @export
 * @interface PageBeer
 */
export interface PageBeer {
    /**
     * 
     * @type {number}
     * @memberof PageBeer
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PageBeer
     */
    totalPages?: number;
    /**
     * 
     * @type {number}
     * @memberof PageBeer
     */
    size?: number;
    /**
     * 
     * @type {Array<Beer>}
     * @memberof PageBeer
     */
    content?: Array<Beer>;
    /**
     * 
     * @type {number}
     * @memberof PageBeer
     */
    number?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageBeer
     */
    sort?: Array<SortObject>;
    /**
     * 
     * @type {number}
     * @memberof PageBeer
     */
    numberOfElements?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageBeer
     */
    pageable?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageBeer
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageBeer
     */
    last?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageBeer
     */
    empty?: boolean;
}

/**
 * Check if a given object implements the PageBeer interface.
 */
export function instanceOfPageBeer(value: object): value is PageBeer {
    return true;
}

export function PageBeerFromJSON(json: any): PageBeer {
    return PageBeerFromJSONTyped(json, false);
}

export function PageBeerFromJSONTyped(json: any, ignoreDiscriminator: boolean): PageBeer {
    if (json == null) {
        return json;
    }
    return {
        
        'totalElements': json['totalElements'] == null ? undefined : json['totalElements'],
        'totalPages': json['totalPages'] == null ? undefined : json['totalPages'],
        'size': json['size'] == null ? undefined : json['size'],
        'content': json['content'] == null ? undefined : ((json['content'] as Array<any>).map(BeerFromJSON)),
        'number': json['number'] == null ? undefined : json['number'],
        'sort': json['sort'] == null ? undefined : ((json['sort'] as Array<any>).map(SortObjectFromJSON)),
        'numberOfElements': json['numberOfElements'] == null ? undefined : json['numberOfElements'],
        'pageable': json['pageable'] == null ? undefined : PageableObjectFromJSON(json['pageable']),
        'first': json['first'] == null ? undefined : json['first'],
        'last': json['last'] == null ? undefined : json['last'],
        'empty': json['empty'] == null ? undefined : json['empty'],
    };
}

export function PageBeerToJSON(value?: PageBeer | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'totalElements': value['totalElements'],
        'totalPages': value['totalPages'],
        'size': value['size'],
        'content': value['content'] == null ? undefined : ((value['content'] as Array<any>).map(BeerToJSON)),
        'number': value['number'],
        'sort': value['sort'] == null ? undefined : ((value['sort'] as Array<any>).map(SortObjectToJSON)),
        'numberOfElements': value['numberOfElements'],
        'pageable': PageableObjectToJSON(value['pageable']),
        'first': value['first'],
        'last': value['last'],
        'empty': value['empty'],
    };
}

