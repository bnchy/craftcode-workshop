/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Brewery,
} from '../models/index';
import {
    BreweryFromJSON,
    BreweryToJSON,
} from '../models/index';

export interface GetBreweryByIdRequest {
    id: number;
}

export interface UnlinkBeerRequest {
    breweryId: number;
    beerId: number;
}

export interface UpdateBreweryRequest {
    id: number;
    brewery: Brewery;
}

/**
 * 
 */
export class BreweryControllerApi extends runtime.BaseAPI {

    /**
     */
    async getBreweriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Brewery>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/breweries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BreweryFromJSON));
    }

    /**
     */
    async getBreweries(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Brewery>> {
        const response = await this.getBreweriesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getBreweryByIdRaw(requestParameters: GetBreweryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Brewery>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBreweryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/breweries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BreweryFromJSON(jsonValue));
    }

    /**
     */
    async getBreweryById(requestParameters: GetBreweryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Brewery> {
        const response = await this.getBreweryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unlinkBeerRaw(requestParameters: UnlinkBeerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['breweryId'] == null) {
            throw new runtime.RequiredError(
                'breweryId',
                'Required parameter "breweryId" was null or undefined when calling unlinkBeer().'
            );
        }

        if (requestParameters['beerId'] == null) {
            throw new runtime.RequiredError(
                'beerId',
                'Required parameter "beerId" was null or undefined when calling unlinkBeer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/breweries/{breweryId}/beers/{beerId}`.replace(`{${"breweryId"}}`, encodeURIComponent(String(requestParameters['breweryId']))).replace(`{${"beerId"}}`, encodeURIComponent(String(requestParameters['beerId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async unlinkBeer(requestParameters: UnlinkBeerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unlinkBeerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateBreweryRaw(requestParameters: UpdateBreweryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Brewery>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateBrewery().'
            );
        }

        if (requestParameters['brewery'] == null) {
            throw new runtime.RequiredError(
                'brewery',
                'Required parameter "brewery" was null or undefined when calling updateBrewery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/breweries/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BreweryToJSON(requestParameters['brewery']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BreweryFromJSON(jsonValue));
    }

    /**
     */
    async updateBrewery(requestParameters: UpdateBreweryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Brewery> {
        const response = await this.updateBreweryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
