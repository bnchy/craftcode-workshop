openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080/api
    description: Generated server url
paths:
  /classifications/{id}:
    get:
      tags:
        - classification-controller
      operationId: getClassificationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Classification'
    put:
      tags:
        - classification-controller
      operationId: updateClassification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Classification'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Classification'
    delete:
      tags:
        - classification-controller
      operationId: deleteClassification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /breweries/{id}:
    get:
      tags:
        - brewery-controller
      operationId: getBreweryById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Brewery'
    put:
      tags:
        - brewery-controller
      operationId: updateBrewery
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brewery'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Brewery'
    delete:
      tags:
        - brewery-controller
      operationId: deleteBreweryById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /beers/{id}:
    get:
      tags:
        - beer-controller
      operationId: getBeer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Beer'
    put:
      tags:
        - beer-controller
      operationId: updateBeer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Beer'
    delete:
      tags:
        - beer-controller
      operationId: deleteBeer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /classifications:
    get:
      tags:
        - classification-controller
      operationId: getClassification
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Classification'
    post:
      tags:
        - classification-controller
      operationId: saveClassification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Classification'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Classification'
  /breweries:
    get:
      tags:
        - brewery-controller
      operationId: getBreweries
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Brewery'
    post:
      tags:
        - brewery-controller
      operationId: saveBrewery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brewery'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Brewery'
  /beers:
    get:
      tags:
        - beer-controller
      operationId: getBeers
      parameters:
        - name: pageNr
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 12
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageBeer'
    post:
      tags:
        - beer-controller
      operationId: addBeer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Beer'
  /user/info:
    get:
      tags:
        - user-controller
      operationId: userInfo
      responses:
        '200':
          description: OK
          content: {}
  /beers/search:
    get:
      tags:
        - beer-controller
      operationId: searchBeers
      parameters:
        - name: searchTerm
          in: query
          required: false
          schema:
            type: string
            default: '1'
        - name: pageNr
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 12
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageBeer'
  /beers/by-brewery/{breweryId}:
    get:
      tags:
        - beer-controller
      operationId: getBeersByBreweryId
      parameters:
        - name: breweryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Beer'
  /breweries/{breweryId}/beers/{beerId}:
    delete:
      tags:
        - brewery-controller
      operationId: unlinkBeer
      parameters:
        - name: breweryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: beerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
components:
  schemas:
    Beer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        alcoholPercentage:
          type: integer
          format: int32
        beerType:
          type: string
          enum:
            - ALCOHOL_FREE
            - ALE
            - FRUIT
            - CHERRY
            - AMBER
            - STRONG_ALE
            - PALE_ALE
            - FLEMISH_RED
            - TRIPLE
            - TRAPPIST
            - BELGIAN_BLONDE
            - WITBIER
            - STOUT
            - LAGER
            - WEISSBIER
            - DUBBEL
            - IPA
        brewery:
          $ref: '#/components/schemas/Brewery'
        classification:
          $ref: '#/components/schemas/Classification'
        likes:
          type: integer
          format: int32
        dislikes:
          type: integer
          format: int32
    Brewery:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        location:
          type: string
    Classification:
      type: object
      properties:
        id:
          type: integer
          format: int64
        country:
          type: string
          enum:
            - BELGIUM
            - GERMANY
            - AMERICA
            - SPAIN
            - FRANCE
            - USA
            - CZECH
            - UK
            - IRELAND
            - AUSTRIA
            - NETHERLANDS
        usedGrainType:
          type: string
          enum:
            - BARLEY
            - WHEAT
            - CORN
            - BASE_MALT
            - OATS
        fermentationType:
          type: string
          enum:
            - WARM
            - COOL
            - WILD
            - SPONTANEOUS
        namesAndOrigins:
          type: string
          enum:
            - ABBEY_BEER
            - TRAPPIST_BEER
            - DARK_BEER
            - SAISON
            - PALE_ALE
            - BITTER
            - STOUT
            - LAMBIC
            - PILSNER
            - TRIPLE
            - LAGER
        beers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Beer'
    PageBeer:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Beer'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        direction:
          type: string
        nullHandling:
          type: string
        ascending:
          type: boolean
        property:
          type: string
        ignoreCase:
          type: boolean
